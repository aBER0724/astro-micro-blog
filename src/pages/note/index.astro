---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { getCategoryDisplayName } from "@config/noteCategories";

// 获取所有非草稿笔记并按日期排序
const notes = (await getCollection("note"))
  .filter((note) => !note.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// 按文件夹分组笔记
const groupedNotes = notes.reduce((acc, note) => {
  const folder = note.slug.split("/")[0];
  if (!acc[folder]) {
    acc[folder] = [];
  }
  acc[folder].push(note);
  return acc;
}, {} as Record<string, typeof notes>);
---

<Layout title="Note" description="My notes">
  <Container>
    <div class="space-y-6">
      <div class="animate font-semibold text-black dark:text-white">Note</div>
      <div class="space-y-8">
        {
          Object.entries(groupedNotes).map(([folder, folderNotes]) => (
            <div class="rounded-lg border border-black/10 p-3 dark:border-white/10">
              <details class="group" open>
                <summary class="flex cursor-pointer list-none items-center justify-between rounded-lg px-3 py-2 transition-colors duration-300 ease-in-out hover:bg-black/5 dark:hover:bg-white/5">
                  <span class="font-medium text-lg text-black dark:text-white">
                    {getCategoryDisplayName(folder)}
                  </span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="size-5 transition-transform duration-300 ease-in-out group-open:rotate-90"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="m9 18 6-6-6-6" />
                  </svg>
                </summary>
                <div class="details-content">
                  <div class="mt-4 space-y-4 px-3">
                    {folderNotes.map((note) => (
                      <a
                        href={`/note/${note.slug}`}
                        class="block rounded-lg border border-black/10 p-4 transition-colors duration-300 ease-in-out hover:bg-black/5 dark:border-white/10 dark:hover:bg-white/5"
                      >
                        <div class="text-sm text-gray-500 dark:text-gray-400">
                          <FormattedDate date={note.data.date} />
                        </div>
                        <div class="font-medium">{note.data.title}</div>
                      </a>
                    ))}
                  </div>
                </div>
              </details>
            </div>
          ))
        }
      </div>
    </div>
  </Container>
</Layout>

<style>
  details > summary::-webkit-details-marker {
    display: none;
  }

  .details-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  details[open] .details-content {
    max-height: 100vh;
  }

  summary svg {
    transform-origin: center;
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  details[open] summary svg {
    transform: rotate(90deg);
  }
</style>

<script>
  function initializeDetails(detail: HTMLDetailsElement) {
    const content = detail.querySelector('.details-content') as HTMLElement;
    if (!content) return;
    
    // 如果details是打开的，立即设置正确的maxHeight
    if (detail.open) {
      // 使用 requestAnimationFrame 确保DOM已经完全渲染
      requestAnimationFrame(() => {
        content.style.maxHeight = `${content.scrollHeight}px`;
      });
    }

    detail.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (!target.closest('summary')) return;
      
      e.preventDefault();
      
      if (!detail.open) {
        detail.open = true;
        requestAnimationFrame(() => {
          content.style.maxHeight = `${content.scrollHeight}px`;
        });
      } else {
        content.style.maxHeight = `${content.scrollHeight}px`;
        requestAnimationFrame(() => {
          content.style.maxHeight = '0px';
        });
        
        content.addEventListener('transitionend', () => {
          if (content.style.maxHeight === '0px') {
            detail.open = false;
          }
        }, { once: true });
      }
    });
  }

  // 使用 requestIdleCallback 在浏览器空闲时初始化
  if ('requestIdleCallback' in window) {
    requestIdleCallback(() => {
      document.querySelectorAll('details').forEach(initializeDetails);
    });
  } else {
    // 降级处理
    setTimeout(() => {
      document.querySelectorAll('details').forEach(initializeDetails);
    }, 0);
  }

  // 处理窗口大小改变
  window.addEventListener('resize', () => {
    document.querySelectorAll('details').forEach(detail => {
      if (detail.open) {
        const content = detail.querySelector('.details-content') as HTMLElement;
        if (content) {
          content.style.maxHeight = `${content.scrollHeight}px`;
        }
      }
    });
  });
</script>
